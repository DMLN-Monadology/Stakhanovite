SIGNUP:

$.ajax({
url: "api/user",
method: "POST",
data: {
  user: {
    username: "Rokossovsky",
    password: "Byelorussia"
      }
  }
});

LOGIN:

$.ajax({
url: "api/session",
method: "POST",
data: {
  user: {
    username: "Rokossovsky",
    password: "Byelorussia"
      }
  }
});

LOGOUT:

$.ajax({
url: "api/session",
method: "DELETE"
});


*********Testing api_utils on windows

import React from 'react';
import ReactDOM from 'react-dom';

import {signup, signin, signout} from './util/session_api_util';

document.addEventListener('DOMContentLoaded', () => {

  window.success = () => {return console.log("success!");};
  window.error = () => {return console.log("failure!");};
  window.params = {
      username: "Rokossovsky",
      password: "Byelorussia"
  }

  const root = document.getElementById('root');
  ReactDOM.render(<h1>Welcome to Stakhanovite, under Construction</h1>, root);


  window.signup = signup;
  window.signin = signin;
  window.signout = signout;
});


*********Testing that actions dispatched will update states on windows
run the commands store.dispatch(signup(params))
run a faulty params to test the errors array

import React from 'react';
import ReactDOM from 'react-dom';
import configureStore from './store/store';

import {signup, signin, signout} from './actions/session_actions';


document.addEventListener('DOMContentLoaded', () => {

  const store = configureStore()
  const root = document.getElementById('root');

  ReactDOM.render(<h1>Welcome to Stakhanovite, under Construction</h1>, root);

  window.store = configureStore()

  window.success = () => {return console.log("success!");};
  window.error = () => {return console.log("failure!");};
  window.params = {
      username: "Vatutin",
      password: "By"
  }


  window.signup = signup;
  window.signin = signin;
  window.signout = signout;
});

**********AJAX test for list

$.ajax ({
  url: `api/lists`,
  method: "POST",
  data: { list: {
      board_id: 63,
      title: "Moscow"
  }}
});


***********MISC

const mapStateToProps = (state, { params }) => {
  const boardId = parseInt(params.boardId);
  return {
    boardId
  };
};

const mapStateToProps = (state, { params }) => {
  const boardId = parseInt(params.boardId);
  const owned_boards = state.session.currentUser.owned_boards;
  let current_board = {};
  for (let i = 0; i < owned_boards.length, i++) {
    if (owned_boards[i].id === boardId) {
      current_board = owned_boards[i];
    };
  };
  return {
    boardId,
    current_board
  };
};
